#log4j.rootLogger = [ level ] , appenderName1, appenderName2, level : 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别
#log4j.appender.file.File=${webApp.root}/WEB-INF/logs/log.log
#Appender 为日志输出目的地
#Layout：日志输出格式，Log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#DailyRollingFileAppender 每天产生一个文件 RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#　    %m 输出代码中指定的消息
#　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c 输出所属的类目，通常就是所在类的全名
#　　%t 输出产生该日志事件的线程名
#　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921
#　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
# 1 设置日志输出级别 
log4j.rootLogger=debug,CONSOLE,file,error
log4j.appender.INF_OUT.encoding=UTF-8
log4j.appender.INF_OUT.StaticLogFileName=false
log4j.appender.INF_OUT.ImmediateFlush=true
log4j.appender.INF_OUT.ROLLING_FILE.MaxFileSize=10KB
log4j.addivity.org.apache=true



# 2 输出到指定的文件中 file
log4j.logger.file=file
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%d{HH:mm:ss}] [%t][%-5p] [%l]- %m%n
#log4j.appender.file.datePattern='.'yyyy-MM-dd
log4j.appender.file.Threshold = info
log4j.appender.file.append=true
log4j.appender.file.MaxFileSize=50MB
log4j.appender.file.MaxBackupIndex=20
#log4j.appender.file.BufferedIO=true
#log4j.appender.file.BufferSize=2048
#在linux系统中
#log4j.appender.file.File=${catalina.home}/logs/logs_tomcat.log 
#在linux或者windowns系统中
log4j.appender.file.File=${user.dir}/logs/info.log

# 3 输出到控制台 Console  
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%t] %c %x - %m%n
log4j.appender.file.Threshold = info

# 4 异常 exception ###
log4j.appender.error = org.apache.log4j.RollingFileAppender
log4j.appender.error.File =${user.dir}/logs/error.log 
log4j.appender.error.Append = true
log4j.appender.error.Threshold = ERROR 
log4j.appender.error.layout = org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern = [sspringmvc_mybatis_demo][%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n
log4j.appender.error.MaxFileSize=50MB
log4j.appender.error.MaxBackupIndex=20

# 5 打印SQL 
#log4j.logger.com.ibatis=debug
#log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug
#log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug
#log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug
log4j.logger.java.sql.Connection=debug
log4j.logger.java.sql.Statement=debug
log4j.logger.java.sql.PreparedStatement=debug
#log4j.logger.java.sql.ResultSet=debug



